{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../TimePicker.svelte",
    "../DatePicker.svelte",
    "../Switcher.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {DatePicker, TimePicker} from \"../src/index.js\";\n\n  let date = new Date();\n  $: _date = date.toLocaleDateString(\"en-US\");\n\n  function dateChanged(event) {\n    console.log(event.detail);\n  }\n\n  function confirmDate(event) {\n    console.log(event.detail);\n  }\n</script>\n\n<div class=\"container\">\n  <div class=\"center\">\n    <p>Date: {_date}</p>\n    <DatePicker\n      bind:date\n      on:dateChange={dateChanged}\n      on:confirmDate={confirmDate}\n    />\n  </div>\n  <div class=\"center\">\n    <p>Time: {_date}</p>\n    <TimePicker\n      bind:date\n      on:dateChange={dateChanged}\n      on:confirmDate={confirmDate}\n    />\n  </div>\n</div>\n\n<style>\n  /* :root{\n    --svtd-bar-color: #0522f3;\n    --svtd-button-color: white;\n    --svtd-button-bg-color: #2466fb;\n    --svtd-border: none;\n    --svtd-button-box-shadow:0 1px 10px -2px #2466fb;\n  }   */\n\n  .container {\n    height: 100%;\n    width: 100%;\n  }\n\n  .center {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    font: 20px \"Roboto\", sans-serif;\n  }\n</style>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import Switcher from './Switcher.svelte';\n\n  export let date = new Date();\n  export let visible = false;\n  export let classes = '';\n  export let display24 = false;\n\n  const HOURS = new Array(display24?24:12).fill(0).map((v, i) => v + i);\n  const MINUTES = new Array(60).fill(0).map((v, i) => v + i);\n  const SECONDS = new Array(60).fill(0).map((v, i) => v + i);\n  const dispatch = createEventDispatcher();\n\n  let _date, popup;\n  $: DAYS = new Array( new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate() ).fill(1).map((v, i) => v + i);\n  $:  _date = date.toLocaleDateString(\"en-US\");\n\n\n\n\n  let resetDate = () => {\n    date = new Date();\n  }\n\n  let dateChanged = (event) => {\n    console.log(\"changed data:\", event.detail)\n    let {type, changedData} = event.detail;\n    let newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\n    switch(type) {\n      case 'hour':\n        if(!display24 && date.getHours() >= 12) {\n          changedData += 12\n        }\n        newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), changedData, date.getMinutes(), date.getSeconds());\n        break;\n      case 'minute':\n        newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), changedData, date.getSeconds());\n        break;\n      case 'second':\n        newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), changedData);\n        break;\n      case 'am/pm':\n        if(changedData === 0 && date.getHours() >= 12) {\n          newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours()-12, date.getMinutes(), date.getSeconds());\n        } else if(changedData === 1 && date.getHours() < 12) {\n          newDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours()+12, date.getMinutes(), date.getSeconds());\n        }\n        break;\n    }\n\n    date = newDate;\n    dispatch('dateChange', {date});\n  }\n\n  function confirmDate(event){\n    visible = !visible\n    dispatch('confirmDate', {MouseEvent:event, date});\n  }\n\n  function clickedOutside(event){\n    if(event.target == popup){\n    // If the click target contains popup,\n    // the click has been made outside.\n    console.log(\"click event:\", event);\n    // if(event.target.querySelector('.touch-date-popup')) {\n      console.log(\"setting visibility to false\")\n      visible = false\n    }\n  }\n</script>\n\n<style>\n.touch-date-popup{\n  z-index: 1;\n  position: fixed;\n  top:0;\n  left:0;\n  right:0;\n  bottom:0;\n  background: rgba(0, 0, 0, 0.3);\n  touch-action: pan-down;\n}\n.touch-date-popup > div{\n  background: var(--svtd-popup-bg-color, white);\n  color: var(--svtd-popup-color, black);\n  margin-top: 30vh;\n  width: 85%;\n  margin-left: 7%;\n  border-radius: var(--svtd-popup-radius, 10px);\n}\n.touch-date-wrapper{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  font-size: var(--svtd-font-size, 20px);\n  padding: 1.5rem;\n}\n\n.touch-date-picker {\n  display: flex;\n  padding: 50px 20px;\n  margin: 10px 0;\n  overflow: hidden;\n}\n\n.touch-date-reset > button {\n  width: 100px;\n  height: 30px;\n  border-radius: 15px;\n  border: var(--svtd-border, 1px solid grey);\n  outline: none;\n  color: var(--svtd-button-color, black);\n  background-color: var(--svtd-button-bg-color, transparent);\n  box-shadow: var(--svtd-button-box-shadow, none) ;\n  font-weight: 300;\n}\n.touch-date-reset button:active {\n  -webkit-transform: scale(0.95);\n          transform: scale(0.95);\n}\n\n.date-line {\n  font-size: 30px;\n  font-weight: 300;\n}\n.day-line{\n  margin: 2px;\n}\n</style>\n\n<input type=\"text\" class='{classes}' readonly value={_date} on:focus={() => {visible = !visible}}>\n{#if visible}\n  <div class=\"touch-date-popup\" on:click={clickedOutside} bind:this={popup}>\n    <div>\n      <div class=\"touch-date-wrapper\">\n        <div class='touch-date-picker'>\n          <Switcher type='hour' data={HOURS} selected={display24?date.getHours()+1:date.getHours()%12+1} on:dateChange={dateChanged}/>\n          <Switcher type='minute' data={MINUTES} selected={date.getMinutes()+1} on:dateChange={dateChanged}/>\n          <Switcher type='second' data={SECONDS} selected={date.getSeconds()+1} on:dateChange={dateChanged}/>\n          {#if !display24}\n          <Switcher type='am/pm' data={['am', 'pm']} selected={date.getHours()<12?1:2} on:dateChange={dateChanged}/>\n          {/if}\n        </div>\n        <div class='touch-date-reset'>\n          <button on:click|stopPropagation={resetDate}>Reset</button>\n          <button on:click|stopPropagation={confirmDate}>Ok</button>\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import Switcher from './Switcher.svelte';\n\n  export let date = new Date();\n  export let visible = false;\n  export let years_map = [1900, 2100];\n  export let classes = '';\n\n  let years_count = ((years_map[1] - years_map[0]) + 1);\n\n  const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec']\n  const YEARS = new Array(years_count).fill(years_map[0]).map((v, i) => v + i);\n  const WEEKDAY = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const dispatch = createEventDispatcher();\n\n  let _date, popup;\n  $: DAYS = new Array( new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate() ).fill(1).map((v, i) => v + i);\n  $:  _date = date.toLocaleDateString(\"en-US\");\n\n\n\n\n  let resetDate = () => {\n    date = new Date();\n  }\n\n  let dateChanged = (event) => {\n\n    let {type, changedData} = event.detail;\n    let newDate = new Date();\n\n    if (type === 'day') {\n      newDate = new Date(date.getFullYear(), date.getMonth(), changedData + 1)\n    } else if (type === 'month') {\n      let maxDayInSelectedMonth = new Date(date.getFullYear(), changedData + 1, 0).getDate()\n      let day = Math.min(date.getDate(), maxDayInSelectedMonth)\n      newDate = new Date(date.getFullYear(), changedData, day)\n    } else if (type === 'year') {\n      let maxDayInSelectedMonth = new Date(years_map[1] + changedData, date.getMonth() + 1, 0).getDate()\n      let day = Math.min(date.getDate(), maxDayInSelectedMonth)\n      newDate = new Date(1900 + changedData, date.getMonth(), day)\n\n    }\n\n    date = newDate;\n    dispatch('dateChange', {date});\n  }\n\n  function confirmDate(event){\n    visible = !visible\n    dispatch('confirmDate', {MouseEvent:event, date});\n  }\n\n  function clickedOutside(event){\n    if(event.target == popup){\n      visible = false\n    }\n  }\n</script>\n\n<style>\n.touch-date-popup{\n  z-index: 1;\n  position: fixed;\n  top:0;\n  left:0;\n  right:0;\n  bottom:0;\n  background: rgba(0, 0, 0, 0.3);\n  touch-action: pan-down;\n}\n.touch-date-popup > div{\n  background: var(--svtd-popup-bg-color, white);\n  color: var(--svtd-popup-color, black);\n  margin-top: 30vh;\n  width: 85%;\n  margin-left: 7%;\n  border-radius: var(--svtd-popup-radius, 10px);\n}\n.touch-date-wrapper{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  font-size: var(--svtd-font-size, 20px);\n  padding: 1.5rem;\n}\n\n.touch-date-picker {\n  display: flex;\n  padding: 50px 20px;\n  margin: 10px 0;\n  overflow: hidden;\n}\n\n.touch-date-reset > button {\n  width: 100px;\n  height: 30px;\n  border-radius: 15px;\n  border: var(--svtd-border, 1px solid grey);\n  outline: none;\n  color: var(--svtd-button-color, black);\n  background-color: var(--svtd-button-bg-color, transparent);\n  box-shadow: var(--svtd-button-box-shadow, none) ;\n  font-weight: 300;\n}\n.touch-date-reset button:active {\n  -webkit-transform: scale(0.95);\n          transform: scale(0.95);\n}\n\n.date-line {\n  font-size: 30px;\n  font-weight: 300;\n}\n.day-line{\n  margin: 2px;\n}\n</style>\n\n<input type=\"text\" class='{classes}' readonly value={_date} on:focus={() => {visible = !visible}}>\n{#if visible}\n  <div class=\"touch-date-popup\" on:click={clickedOutside} bind:this={popup}>\n    <div>\n      <div class=\"touch-date-wrapper\">\n        <div class='date-line'>{ date.getDate() } { MONTHS[date.getMonth()] } { date.getFullYear() }</div>\n        <p class='day-line'>{ WEEKDAY[date.getDay()] }</p>\n        <div class='touch-date-picker'>\n          <Switcher type='day' data={DAYS} selected={date.getDate()} on:dateChange={dateChanged}/>\n          <Switcher type='month' data={MONTHS} selected={date.getMonth() + 1} on:dateChange={dateChanged}/>\n          <Switcher type='year' data={YEARS} selected={date.getYear() + 1} on:dateChange={dateChanged}/>\n        </div>\n        <div class='touch-date-reset'>\n          <button on:click|stopPropagation={resetDate}>Reset</button>\n          <button on:click|stopPropagation={confirmDate}>Ok</button>\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n\n",
    "<script>\n\n  import { afterUpdate, onMount, createEventDispatcher } from 'svelte';\n\n  const dispatch = createEventDispatcher();\n\n  export let selected;\n  export let data = 0;\n  export let type;\n\n  let position = selected ? -(selected - 1) * 50 : 0;\n  let offset = 0;\n  let dragging = false;\n\n  let itemWrapper, previousY;\n\n\n  onMount(() => {\n   setPosition()\n  });\n\n  afterUpdate(() => {\n\t\tlet selectedPosition = -(selected - 1) * 50\n\n    if (!dragging && position !== selectedPosition) {\n        position = selectedPosition\n        setPosition()\n    }\n  });\n\n\n  function onDateChange(type, changedData) {\n\t\tdispatch('dateChange', {\n\t\t\ttype, changedData\n\t\t});\n  }\n\n  function setPosition(){\n     let itemPosition = `\n      will-change: 'transform';\n      transition: transform ${Math.abs(offset) / 100 + 0.1}s;\n      transform: translateY(${position}px)\n    `;\n    itemWrapper.style.cssText = itemPosition;\n  }\n\n  let onMouseDown = (event) => {\n    previousY = event.touches ? event.touches[0].clientY : event.clientY;\n    dragging = true;\n\n    window.addEventListener('mousemove', onMouseMove)\n    window.addEventListener('mouseup', onMouseUp)\n    window.addEventListener('touchmove', onMouseMove)\n    window.addEventListener('touchend', onMouseUp)\n  }\n\n   let onMouseMove = (event) => {\n    let clientY = event.touches ? event.touches[0].clientY : event.clientY;\n    offset = clientY - previousY;\n\n    let maxPosition = -data.length * 50;\n    let _position = position + offset;\n    position = Math.max(maxPosition, Math.min(50, _position))\n    previousY = event.touches ? event.touches[0].clientY : event.clientY;\n    setPosition();\n  }\n\n  let onMouseUp = () => {\n    let maxPosition = -(data.length - 1) * 50;\n    let rounderPosition = Math.round((position + offset * 5) / 50) * 50;\n    let finalPosition = Math.max(maxPosition, Math.min(0, rounderPosition));\n\n    dragging = false;\n    position = finalPosition;\n\n    window.removeEventListener('mousemove', onMouseMove)\n    window.removeEventListener('mouseup', onMouseUp)\n    window.removeEventListener('touchmove', onMouseMove)\n    window.removeEventListener('touchend', onMouseUp);\n\n    setPosition();\n    onDateChange(type, -finalPosition / 50);\n  }\n\n  let onWheel = (e) => {\n    if (e.deltaY < 0)\n      {\n        position = position - 50\n      }\n      if (e.deltaY > 0)\n      {\n        position = position + 50\n      }\n    onMouseUp()\n  }\n\n\n</script>\n\n\n<style>\n .touch-date-wrapper {\n  position: relative;\n  height: 50px;\n  margin: 0 10px;\n  border-top: 1px solid var(--svtd-bar-color, grey);\n  border-bottom: 1px solid var(--svtd-bar-color, grey);\n  border-radius: 0;\n}\n.touch-date-container {\n  margin: 0;\n  padding: 0;\n}\n\n.touch-date-wrapper:before,\n.touch-date-wrapper:after {\n  content: '';\n  position: absolute;\n  left: 0;\n  width: 80px;\n  height: 50px;\n  background-color: #fff;\n  opacity: 0.8;\n  pointer-events: none;\n  z-index: 1;\n}\n\n.touch-date-wrapper:before {\n  top: -51px;\n}\n\n.touch-date-wrapper:after {\n  bottom: -51px;\n}\n\n.touch-date-container li {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 80px;\n  height: 50px;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n</style>\n\n\n<div class='touch-date-wrapper' on:mousedown={onMouseDown} on:touchstart={onMouseDown} on:wheel={onWheel}>\n  <ul bind:this={itemWrapper} class=\"touch-date-container\">\n   {#each data as item }\n     <li>{item}</li>\n   {/each}\n  </ul>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}